//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Text;
using UnityEngine;

namespace Assets.Tools.Script.Helper
{
    using System.Collections.Generic;

    public static class StringHelper
    {
        public static char[] buffer = new char[1024];

        public static string ShortStringToLower(string str)
        {
            for (int i = 0; i < str.Length; i++)
            {
                char c = str[i];
                if (c <= 'Z' && c >= 'A')
                {
                    buffer[i] = (char)(c + 32);
                }
                else
                {
                    buffer[i] = c;
                }
            }
            return new string(buffer, 0, str.Length);
        }

        public static string GetFileName(string str)
        {
            for (int i = str.Length - 1; i >= 0; i--)
            {
                if (str[i] == '/' || str[i] == '\\')
                {
                    return str.Substring(i + 1, str.Length - i - 1);
                }
            }
            return null;
        }

        public static string GetFileNameWithoutExtension(string str)
        {
            int pIndex = -1;
            for (int i = str.Length - 1; i >= 0; i--)
            {
                if (str[i] == '/' || str[i] == '\\')
                {
                    if (pIndex == -1)
                    {
                        break;
                    }
                    return str.Substring(i + 1, pIndex - i - 1);
                }
                if (str[i] == '.')
                {
                    pIndex = i;
                }
            }
            return null;
        }

        public static string GetFilePathWithoutExtension(string str)
        {
            for (int i = str.Length - 1; i >= 0; i--)
            {
                if (str[i] == '.')
                {
                    return str.Substring(0, i);
                }
            }
            return null;
        }

        public static string GetExtension(string str)
        {
            for (int i = str.Length - 1; i >= 0; i--)
            {
                if (str[i] == '.')
                {
                    return str.Substring(i, str.Length - i);
                }
            }
            return null;
        }

        public static string GetDirectoryName(string str)
        {
            for (int i = str.Length - 1; i >= 0; i--)
            {
                if (str[i] == '/' || str[i] == '\\')
                {
                    return str.Substring(0, i);
                }
            }
            return null;
        }

        /// <summary>
        /// 用制定的拼接符拼接字符串
        /// </summary>
        /// <param name="src"></param>
        /// <param name="separator">拼接符</param>
        /// <returns></returns>
        public static string Joint(this string[] src, string separator)
        {
            if (src == null || src.Length == 0)
            {
                return string.Empty;
            }

            StringBuilder str = new StringBuilder();
            for (int i = 0; i < src.Length; i++)
            {
                str.Append(src[i]);
                str.Append(separator);
            }
            str.Remove(str.Length - separator.Length, separator.Length);
            return str.ToString();
        }

        /// <summary>
        /// 用制定的拼接符拼接字符串
        /// </summary>
        /// <param name="src"></param>
        /// <param name="separator">拼接符</param>
        /// <returns></returns>
        public static string Joint(this List<string> src, string separator)
        {
            if (src == null || src.Count == 0)
            {
                return string.Empty;
            }

            StringBuilder str = new StringBuilder();
            for (int i = 0; i < src.Count; i++)
            {
                str.Append(src[i]);
                str.Append(separator);
            }
            str.Remove(str.Length - 1, 1);
            return str.ToString();
        }

        /// <summary>
        /// where string like 15.21,548,157
        /// </summary>
        /// <returns></returns>
        public static Vector3 GetVector3FromString(string str)
        {
            Vector3 v;
            string[] strings = str.Split(',');
            v.x = (float)Convert.ToDouble(strings[0]);
            v.y = (float)Convert.ToDouble(strings[1]);
            v.z = (float)Convert.ToDouble(strings[2]);
            return v;
        }

        /// <summary>
        /// where string like 15.21,548,157
        /// </summary>
        /// <returns></returns>
        public static Quaternion GetQuaternionFromString(string str)
        {
            Quaternion v = new Quaternion();
            Vector3 vector3FromString = GetVector3FromString(str);
            v.eulerAngles = vector3FromString;
            return v;
        }

        /// <summary>
        /// 在两边补充空格
        /// </summary>
        /// <param name="s"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        public static string PadBoth(this string s, int length)
        {
            var pad1 = (length - s.Length) / 2 + s.Length;
            s = s.PadLeft(pad1);
            s = s.PadRight(length);
            return s;
        }

        public static List<string> SplitHump(this string str)
        {
            List<string> strs = new List<string>();
            if (str == null || str.Length == 0)
            {
                return strs;
            }
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < str.Length; i++)
            {
                var c = str[i];
                if (c >= 'A' && c <= 'Z')
                {
                    if (builder.Length > 0)
                    {
                        strs.Add(builder.ToString());
                        builder = new StringBuilder();
                    }
                }
                builder.Append(c);
            }
            if (builder.Length > 0)
            {
                strs.Add(builder.ToString());
                builder = new StringBuilder();
            }
            return strs;
        }
    }


}

